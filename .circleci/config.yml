# API
version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@0.0.2
  aws-ecs: circleci/aws-ecs@0.0.10

parameters:
  java-home:
    type: string
    default: /usr/java/openjdk-16

workflows:
  build-and-deploy:
    jobs:
      - run-api-tests
      - run-spa-tests
#      - aws-ecr/build_and_push_image:
#          account-url: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
#          repo: "${AWS_RESOURCE_NAME_PREFIX}"
#          region: ${AWS_DEFAULT_REGION}
#          tag: "${CIRCLE_SHA1}"
#      - aws-ecs/deploy-service-update:
#          requires:
#            - aws-ecr/build_and_push_image
#          aws-region: ${AWS_DEFAULT_REGION}
#          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
#          cluster-name: "demo-webapp-cluster"
#          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"
#          verify-revision-is-deployed: true
#          post-steps:
#            - run:
#                name: Test the deployment
#                command: |
#                  TARGET_GROUP_ARN=$(aws ecs describe-services --cluster demo-webapp-cluster --services ${AWS_RESOURCE_NAME_PREFIX}-service | jq -r '.services[0].loadBalancers[0].targetGroupArn')
#                  ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
#                  ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')

jobs:
  run-api-tests:
    machine:
      image: ubuntu-2004:202201-02
      docker_layer_caching: true
    steps:
      - checkout
      - install_openjdk
      - run: cd api
      - run:
          name: Run API tests
          command: |
            cd api;
            TZ=Asia/Tokyo JAVA_HOME=<< pipeline.parameters.java-home >>/jdk-16 ./gradlew test --info;
          no_output_timeout: 30m
      - run:
          name: Creating Dummy Artifacts
          command: |
            echo "my artifact file" > /tmp/art-1;
            mkdir /tmp/artifacts;
            echo "my artifact files in a dir" > /tmp/artifacts/art-2;
      - store_artifacts:
          path: /tmp/art-1
          destination: artifact-file
      - store_artifacts:
          path: /tmp/artifacts
      - store_test_results:
          path: /tmp/artifacts
  run-spa-tests:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run: cd spa
      - run: npm install
      - run: npm run test:ci
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
      - store_artifacts:
          path: coverage

commands:
  install_openjdk:
    steps:
      - run:
          name: Install JDK 16
          command: |
            sudo apt-get update

            sudo mkdir -p << pipeline.parameters.java-home >>

            wget -O openjdk.tgz https://download.java.net/java/GA/jdk16/7863447f0ab643c585b9bdebf67c69db/36/GPL/openjdk-16_linux-x64_bin.tar.gz
            sudo tar -x -f openjdk.tgz -C << pipeline.parameters.java-home >>
            rm openjdk.tgz


# SPA
#version: 2.1
#orbs:
#  aws-ecr: circleci/aws-ecr@0.0.2
#  aws-ecs: circleci/aws-ecs@0.0.10
#jobs:
#  test:
#    docker:
#      - image: circleci/node:12
#    steps:
#      - checkout
#      - run: npm install
#      - run: npm run test:ci
#      - store_test_results:
#          path: reports
#      - store_artifacts:
#          path: reports
#      - store_artifacts:
#          path: coverage
#workflows:
#  build-and-deploy:
#    jobs:
#      - test
#      - aws-ecr/build_and_push_image:
#          account-url: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
#          repo: "${AWS_RESOURCE_NAME_PREFIX}"
#          region: ${AWS_DEFAULT_REGION}
#          tag: "${CIRCLE_SHA1}"
#      - aws-ecs/deploy-service-update:
#          requires:
#            - aws-ecr/build_and_push_image
#          aws-region: ${AWS_DEFAULT_REGION}
#          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
#          cluster-name: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
#          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"
#          verify-revision-is-deployed: true
#          post-steps:
#            - run:
#                name: Test the deployment
#                command: |
#                  TARGET_GROUP_ARN=$(aws ecs describe-services --cluster ${AWS_RESOURCE_NAME_PREFIX}-cluster --services ${AWS_RESOURCE_NAME_PREFIX}-service | jq -r '.services[0].loadBalancers[0].targetGroupArn')
#                  ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
#                  ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
#                  curl -s --retry 10 http://$ELB_DNS_NAME | grep "html"